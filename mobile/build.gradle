buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.jpardogo.materialtabstrip:library:1.0.9'
    compile 'de.hdodenhof:circleimageview:1.2.2'

    compile "com.android.support:appcompat-v7:21.0.3"
    compile 'com.android.support:support-v13:21.0.0'
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'io.reactivex:rxandroid:0.24.0'

    compile 'io.reactivex:rxjava:1.0.8'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.crashlytics.android:crashlytics:1.+'
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    defaultConfig {
        applicationId "com.ataulm.wutson2"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 7
        versionName 'dog-fooding'

        Calendar instance = Calendar.getInstance()
        instance.setTimeInMillis(System.currentTimeMillis())
        def buildTime = instance.getTime()
        buildConfigField "String", "BUILD_TIME", "\"$buildTime\""

        def tmdbApiKey = hasProperty('tmdbApiKey') ? tmdbApiKey : 'provide this in gradle.properties'
        buildConfigField "String", "TMDB_API_KEY", "\"$tmdbApiKey\""
    }

    signingConfigs {
        def signingStoreFile = hasProperty('signingStoreFile') ? signingStoreFile : 'provide this in gradle.properties'
        def signingStorePassword = hasProperty('signingStorePassword') ? signingStorePassword : 'provide this in gradle.properties'
        def signingKeyAlias = hasProperty('signingKeyAlias') ? signingKeyAlias : 'provide this in gradle.properties'
        def signingKeyPassword = hasProperty('signingKeyPassword') ? signingKeyPassword : 'provide this in gradle.properties'

        release {
            storeFile file(signingStoreFile)
            storePassword signingStorePassword
            keyAlias signingKeyAlias
            keyPassword signingKeyPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        lintConfig file("lint-config.xml")
    }

    def crashlyticsApiKey = project.hasProperty('crashlyticsApiKey') ? crashlyticsApiKey : System.env.crashlyticsApiKey
    def crashlyticsApiSecret = project.hasProperty('crashlyticsApiSecret') ? crashlyticsApiSecret : System.env.crashlyticsApiSecret

    File crashlyticsProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
    applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def crashlyticsGenerateResourcesTask = project.tasks.getByName("crashlyticsGenerateResources${variantName}")
        def myGenerateCrashlyticsPropertiesFileTask = task("crashlyticsGenerateProperties${variantName}") << {
            Properties properties = new Properties()
            println "...copying apiKey for $variantName"
            properties.put("apiKey", crashlyticsApiKey)
            println "...copying apiSecret for $variantName"
            properties.put("apiSecret", crashlyticsApiSecret)
            properties.store(new FileWriter(crashlyticsProperties), "")
        }
        crashlyticsGenerateResourcesTask.dependsOn myGenerateCrashlyticsPropertiesFileTask
        crashlyticsGenerateResourcesTask.doLast {
            println "...removing crashlytics.properties"
            crashlyticsProperties.delete()
        }
    }

}
